@page "/"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject IDataServiceProject dataP
@inject NavigationManager navigate

@attribute [Authorize]
<h3>Проекты</h3>

<div class="btn-group m-2">
    <button class="btn btn-primary" @onclick="CreateProject">Создать проект</button>
</div>

@if (projects != null)
{
    <table class="table">

        <!--Тесто-->
        <thead>
            <tr>
                <th>Название</th>
                <th>Предстоящие задачи</th>
                <th>Задачи в процессе</th>
                <th>Выполненные задачи</th>
                <th>Статус</th>
                <th>Просмотр</th>
            </tr>
        </thead>

        <!--Фарш-->
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Tasks?.Count(t => t.Status == "Предстоящие")</td>
                    <td>@project.Tasks?.Count(t => t.Status == "В процессе")</td>
                    <td>@project.Tasks?.Count(t => t.Status == "Выполненные")</td>
                    <td>@project.Status</td>
                    <td><button class="btn btn-primary" @onclick="() => ViewProject(project.Id)">Задачи</button></td>
                </tr>
                <button class="btn btn-primary" @onclick="async () => await DeleteProject(project.Id)">Удалить</button>
                <a class="btn btn-primary" href="projects/@project.Id">Редактировать</a>
            }
        </tbody>
    </table>
}
else
{
    <tr>
        <td colspan="5">Loading...</td>
    </tr>
}

@code {
    IEnumerable<Project>? projects;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        projects = await dataP.GetAllProjectsAsync();
    }

    void CreateProject()
    {
        navigate.NavigateTo("/create-project");
    }

    private void ViewProject(int id)
    {
        navigate.NavigateTo($"project-tasks/{id}");
    }

    async Task DeleteProject(int id)
    {
        await dataP.DeleteProjectAsync(id);
        projects = await dataP.GetAllProjectsAsync();
    }
}